pragma solidity ^0.4.24;

import "../datesccesscontrol/FarmerRole.sol";
import "../datesccesscontrol/ConsumerRole.sol";
import "../datesccesscontrol/PartnerRole.sol";
import "../datescore/Ownable.sol";
// Define a contract 'Supplychain'
contract SupplyChain is Ownable , ConsumerRole , FarmerRole , PartnerRole {

  // Define 'currentOwner'
  address currentOwner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item)  items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
   mapping (uint => string[])   itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Planted, //0
    Harvested,  // 1
    Shipped,  // 2
    Received, // 3
    Processed,  // 4
    Packed,     // 5
    ForSale,    // 6
    Bought   // 7
    }

  State constant defaultState = State.Planted;

  // Define a struct 'Item' or "date for this case" with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    uint    productYear; // the year for harviest session 
    State   itemState;  // Product State as represented in the enum above
    address  partnerID;  // Metamask-Ethereum address of the Partner
    address  consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Planted(uint upc);
  event Harvested(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Bought(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == currentOwner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // following group of modifier is to check the state of dates

 // Define a modifier that checks if an item.state of a upc is Planted
  modifier planted(uint _upc) {
    require(items[_upc].itemState == State.Planted);
    _;
  }
  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier bought(uint _upc) {
    require(items[_upc].itemState == State.Bought);
    _;
  }
  
  // In the constructor set 'currentOwner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    currentOwner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == currentOwner) {
      selfdestruct(currentOwner);
    }
  }


// Define a function 'plantedItem' that allows a farmer to mark an item 'Planted'
  function plantedItem(uint _upc, address _originFarmerID, string  _originFarmName, string  _originFarmInformation, 
  string   _originFarmLatitude, string  _originFarmLongitude, string  _productNotes, uint _productYear) public 
  onlyFarmer()
  {
    // Add the new item as part of Planted
    items[_upc] = Item({upc : _upc, sku : sku, originFarmerID : _originFarmerID, originFarmInformation : _originFarmInformation,
    ownerID : _originFarmerID, originFarmName : _originFarmName, originFarmLatitude:_originFarmLatitude , originFarmLongitude: _originFarmLongitude,
    productNotes : _productNotes, productYear : _productYear , productID : _upc+sku, itemState : State.Planted , consumerID : address(0)
    , partnerID : address(0), productPrice : 0});
    // price will be identify by partner
    itemsHistory[_upc].push("Planted");
    // need to get the transaxtion ID or something to added to history 
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Planted(_upc);
  }

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function harvestItem(uint _upc) public 
  // call modifier to verify the caller of this function
  onlyFarmer()
  //call modifier to verify the item is planted first
  planted(_upc)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Harvested;
    itemsHistory[_upc].push("Harvested");

    // Emit the appropriate event
    emit Harvested(_upc);
  }

 // Define a function 'shipItem' that allows the farmer to mark an item 'Shipped'
  // Use the above modifers to check if the item is Harvested 
  function shipItem(uint _upc) public 
      // Call modifier to verify caller of this function
    onlyFarmer()
    // Call modifier to check if upc has passed previous supply chain stage
    harvested(_upc)
    {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;
    itemsHistory[_upc].push("Shipped");

    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows the partner to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) public 
      // Access Control List enforced by calling Smart Contract / DApp
    onlyPartner()
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)
    {
    // Update the appropriate fields - ownerID, partnerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].partnerID = msg.sender;
    items[_upc].itemState = State.Received;
    itemsHistory[_upc].push("Received");

    // Emit the appropriate event
    emit Received(_upc);
  }

  // Define a function 'processtItem' that allows a partner to mark an item 'Processed'
  function processItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  received(_upc)
  // Call modifier to verify caller of this function
  onlyPartner()
  {
    // Update the appropriate fields
        items[_upc].itemState = State.Processed;
        itemsHistory[_upc].push("Processed");
    // Emit the appropriate event
    emit Processed(_upc);
  }

  // Define a function 'packItem' that allows a partner to mark an item 'Packed'
  function packItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  processed(_upc)
  // Call modifier to verify caller of this function
  onlyPartner()
  {
    // Update the appropriate fields
        items[_upc].itemState = State.Packed;
        itemsHistory[_upc].push("Packed");

    // Emit the appropriate event
    emit Packed(_upc);
  }

  // Define a function 'sellItem' that allows a partner to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public 
  // Call modifier to check if upc has passed previous supply chain stage
  packed(_upc)
  // Call modifier to verify caller of this function
  onlyPartner()
  {
    // Update the appropriate fields
      items[_upc].itemState = State.ForSale;
      items[_upc].productPrice = _price;
      itemsHistory[_upc].push("ForSale");

    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the partner to mark an item 'bought'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable 
  // Call modifier to verify caller of this function
    onlyConsumer()
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(_upc)
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
        items[_upc].consumerID = msg.sender;
        items[_upc].ownerID = msg.sender;
        items[_upc].itemState = State.Bought;
        itemsHistory[_upc].push("Bought");
    // Transfer money to partner
    items[_upc].partnerID.transfer(items[_upc].productPrice);
    // emit the appropriate event
    emit Bought(_upc);
  }


  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originFarmerID,
  string  originFarmName,
  string   originFarmInformation,
  string  originFarmLatitude,
  string  originFarmLongitude,
  uint productYear
  ) 
  {
  // Assign values to the 8 parameters
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  ownerID = items[_upc].ownerID;
  originFarmerID = items[_upc].originFarmerID;
  originFarmName = items[_upc].originFarmName;
  originFarmInformation = items[_upc].originFarmInformation;
  originFarmLatitude =  items[_upc].originFarmLatitude;
  originFarmLongitude = items[_upc].originFarmLongitude;
  productYear = items[_upc].productYear;    
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originFarmerID,
  originFarmName,
  originFarmInformation,
  originFarmLatitude,
  originFarmLongitude,
  productYear
  );

  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  uint    itemState,
  address partnerID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
  itemSKU =items[_upc].sku;
  itemUPC = items[_upc].upc;
  productID = items[_upc].productID;
  productNotes = items[_upc].productNotes;
  productPrice = items[_upc].productPrice;
  itemState = uint(items[_upc].itemState);
  partnerID = items[_upc].partnerID;
  consumerID = items[_upc].consumerID;
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  partnerID,
  consumerID
  );
  }
}
