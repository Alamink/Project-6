// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('../contracts/datesbase/SupplyChain.sol')

contract('SupplyChain', async function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "Alamin"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    const productYear = 2019;
    var productID = sku + upc
    const productNotes = "Best dates"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const partnerID = accounts[2]
    const consumerID = accounts[3]
    const emptyAddress = '0x00000000000000000000000000000000000000'


    // constanst for the evetns name
    var eventPlancted = "Planted"
    var eventHarvested = "Harvested"
    var eventShipped= "Shipped"
    var eventReceived =  "Received"
    var eventProcessed = "Processed"
    var eventPacked = "Packed"
    var eventForSale = "ForSale"
    var eventBought = "Bought"
    var eventConsumerAdded = "ConsumerAdded"
    var eventConsumerRemoved = "ConsumerRemoved"
    var eventFarmerAdded = "FarmerAdded"
    var eventFarmerRemoved = "FarmerRemoved"
    var eventPartnerAdded = "PartnerAdded"
    var eventPartnerRemoved = "PartnerRemoved"
    ///Available Accounts
    ///==================
    ///(0) 0xd6c3a15295e19bc6cce97914b7eb5d71eeb198bf ( Will have all roles when deploy)
    ///(1) 0x5e60176a56348a77217e7464c19c5875dc652693
    ///(2) 0x39e68c2b60c402ea1af4da1d16f4cb66d406143f
    ///(3) 0xe8f3b752c49062ea0e5bb13ba179c54c182e181d
    ///(4) 0x644c7cb0bf173ceb06e104684303eeefc06d7f20
    ///(5) 
    ///(6) 
    ///(7) 
    ///(8) 
    ///(9) 

    // console.log("truffle accounts used here...")
    // console.log("Contract Owner: accounts[0] ", accounts[0])
    // console.log("Farmer: accounts[1] ", accounts[1])
    // console.log("Partner balance: ", await web3.eth.getBalance(accounts[2]))
    // console.log("Consumer balance:  ", await web3.utils.fromWei((await web3.eth.getBalance(accounts[3])).toString(),"ether"))

    // 1st Test
    it("Testing smart contract function plantedItem() that allows a farmer to plant dates", async() => {
        const supplyChain = await SupplyChain.deployed()

        // add the the role for farmer
        await supplyChain.addFarmer(originFarmerID)

        // Mark an item as Planted by calling function plantedItem()
       let event = await supplyChain.plantedItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, productYear
            ,{from : originFarmerID})
        // Declare and Initialize a variable for event
        let  eventEmitted = event.logs[0].event

        // // await supplyChain.plantedItem(upc, {from : consumerID, value : productPrice}) this is how to pass value 
        // // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

    
        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], productYear, "Error: Missing or Invalid ProductYear")
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, eventPlancted, 'Invalid event emitted')        
    })    
     // 2nd Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest date", async() => {
        const supplyChain = await SupplyChain.deployed()
        itemState = 1
        // Declare and Initialize a variable for event
        // Watch the emitted event Processed()
        // Mark an item as Processed by calling function harvestItem()
        let event = await supplyChain.harvestItem(upc,{from : originFarmerID})
        let  eventEmitted = event.logs[0].event

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, eventHarvested, 'Invalid event emitted')  
    })    

    // 3rd Test
    it("Testing smart contract function shipItem() that allows a farmer to ship dates", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        itemState = 2
        // Declare and Initialize a variable for event
        // Watch the emitted event ship()
        // Mark an item as Shipped by calling function shipItem()
        let event = await supplyChain.shipItem(upc,{from : originFarmerID})
        let  eventEmitted = event.logs[0].event

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, eventShipped, 'Invalid event emitted')  
    })    

    // 4th Test
    it("Testing smart contract function receiveItem() that allows a partner to receive dates", async() => {
        const supplyChain = await SupplyChain.deployed()

        itemState = 3
        // add the the role for farmer
        let event = await supplyChain.addPartner(partnerID)

        let  eventEmitted = event.logs[0].event
        assert.equal(eventEmitted, eventPartnerAdded, 'Invalid event emitted') 

        // Declare and Initialize a variable for event
        // Watch the emitted event ship()
        // Mark an item as Shipped by calling function shipItem()
         event = await supplyChain.receiveItem(upc,{from : partnerID})
         eventEmitted = event.logs[0].event

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2],partnerID,"Error: Missing or Invalid ownerID")
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], partnerID, 'Error: Missing or Invalid partnerID')
        assert.equal(eventEmitted, eventReceived, 'Invalid event emitted')  
          
    })    

    // 5th Test
    it("Testing smart contract function processItem() that allows a partner to process dates", async() => {
        const supplyChain = await SupplyChain.deployed()
        itemState =4 
        // Declare and Initialize a variable for event
        // Watch the emitted event process()
        // Mark an item as process by calling function processItem()
        let event = await supplyChain.processItem(upc,{from : partnerID})
        let  eventEmitted = event.logs[0].event

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, eventProcessed, 'Invalid event emitted')  
        
    })    

    // 6th Test
    it("Testing smart contract function packItem() that allows a partner to pack dates", async() => {
        const supplyChain = await SupplyChain.deployed()
        itemState = 5
        // Declare and Initialize a variable for event
        // Watch the emitted event pack()
        // Mark an item as packed by calling function packItem()
        let event = await supplyChain.packItem(upc,{from : partnerID})
        let  eventEmitted = event.logs[0].event

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, eventPacked, 'Invalid event emitted')  
    })    

    // 7th Test
    it("Testing smart contract function sellItem() that allows a partner to mark dates for sale", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        itemState = 6
        // Declare and Initialize a variable for event
        // Watch the emitted event sell()
        // Mark an item as for sell by calling function sellItem()
        let event = await supplyChain.sellItem(upc, productPrice ,{from : partnerID})
        let  eventEmitted = event.logs[0].event

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item price')
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, eventForSale, 'Invalid event emitted')  
    })    

    // 8th Test
    it("Testing smart contract function buyItem() that allows a consumer to buy dates", async() => {
        const supplyChain = await SupplyChain.deployed()
        itemState = 7
        //testing the event for adding consumer role 
        let event = await  supplyChain.addConsumer(consumerID)
        let  eventEmitted = event.logs[0].event
        assert.equal(eventEmitted, eventConsumerAdded, 'Invalid event emitted') 



        // Declare and Initialize a variable for event
        // Watch the emitted event Bought()
        // Mark an item as Bought  by calling function buyItem()
         event = await supplyChain.buyItem(upc ,{from : consumerID, value: productPrice})
         eventEmitted = event.logs[0].event

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2],consumerID,"Error: Missing or Invalid ownerID")
        assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumer ID')
        assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, eventBought, 'Invalid event emitted') 
        
    })    

    
    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed() 
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc,{from:accounts[5]})
        // Verify the result set:
        assert.equal(resultBufferOne[0],sku,"Error: Missing or Invalid sku")
        assert.equal(resultBufferOne[1],upc,"Error: Missing or Invalid upc")
        assert.equal(resultBufferOne[2],consumerID,"Error: Missing or Invalid consumerID")
        assert.equal(resultBufferOne[3],originFarmerID,"Error: Missing or Invalid originFarmerID")
        assert.equal(resultBufferOne[4],originFarmName,"Error: Missing or Invalid originFarmName")
        assert.equal(resultBufferOne[5],originFarmInformation,"Error: Missing or Invalid originFarmInformation")
        assert.equal(resultBufferOne[6],originFarmLatitude,"Error: Missing or Invalid originFarmLatitude")
        assert.equal(resultBufferOne[7],originFarmLongitude,"Error: Missing or Invalid originFarmLongitude")
        assert.equal(resultBufferOne[8],productYear,"Error: Missing or Invalid productYear")
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc,{from:accounts[5]})
        // Verify the result set:   
        assert.equal(resultBufferTwo[0],sku,"Error: Missing or Invalid sku")
        assert.equal(resultBufferTwo[1],upc,"Error: Missing or Invalid upc")
        assert.equal(resultBufferTwo[2],productID,"Error: Missing or Invalid productID")
        assert.equal(resultBufferTwo[3],productNotes,"Error: Missing or Invalid productNotes")
        assert.equal(resultBufferTwo[4],productPrice,"Error: Missing or Invalid productPrice")
        assert.equal(resultBufferTwo[5],itemState,"Error: Missing or Invalid itemState")
        assert.equal(resultBufferTwo[6],partnerID,"Error: Missing or Invalid partnerID")
        assert.equal(resultBufferTwo[7],consumerID,"Error: Missing or Invalid consumerID")
    })
    //11th Test
    it("Testing smart contract functions for adding and removing roles", async()=>{
        const supplyChain = await SupplyChain.deployed()

        // 
        let addFortest = accounts[4];
        // now test event for adding the roles to user
        let event = await  supplyChain.addPartner(addFortest)
        let eventEmitted = event.logs[0].event
        assert.equal(eventEmitted, eventPartnerAdded, 'Invalid event emitted') 

        event = await  supplyChain.addFarmer(addFortest)
        eventEmitted = event.logs[0].event
        assert.equal(eventEmitted, eventFarmerAdded, 'Invalid event emitted') 

        event = await  supplyChain.addConsumer(addFortest)
        eventEmitted = event.logs[0].event
        assert.equal(eventEmitted, eventConsumerAdded, 'Invalid event emitted') 

        //test for roles adding and removoing....
        // removing the roles from owner of this contract
         event = await  supplyChain.renouncePartner({from:addFortest})
          eventEmitted = event.logs[0].event
        assert.equal(eventEmitted, eventPartnerRemoved, 'Invalid event emitted') 

        event = await  supplyChain.renounceFarmer({from:addFortest})
        eventEmitted = event.logs[0].event
        assert.equal(eventEmitted, eventFarmerRemoved, 'Invalid event emitted') 

        event = await  supplyChain.renounceConsumer({from:addFortest})
        eventEmitted = event.logs[0].event
        assert.equal(eventEmitted, eventConsumerRemoved, 'Invalid event emitted') 
    })
});

